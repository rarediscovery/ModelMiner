/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.rarediscovery.services.ui;

import com.rarediscovery.services.filters.StringFilter;
import com.rarediscovery.services.logic.TextReader;
import java.awt.FileDialog;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 *
 * @author usaa_developer
 */
public class StringFilterUI extends javax.swing.JPanel {

    Map<String,List<String>> configData=  new HashMap<>();
    DefaultListModel<String>  selectedParametersListModel = new DefaultListModel<>();
    DefaultComboBoxModel<String>  soureHistoryFilesListModel = new DefaultComboBoxModel<>();
    
    
    private List<String> createList( String...items)
    {
          List<String> list = new ArrayList<>();
         if (items == null ) return list;
           
        for(String item: items){
            list.add(item);
         }
           return list;
    }

    public String[] getConfigKeys() {
        return configData.keySet().toArray(new String[0]);
    }
        
     public List<String> getConfigParameters(String key) {
        return configData.get(key);
    }
    
    /**
     * Creates new form StringFilterUI
     */
    public StringFilterUI() {
        loadInitializationData();
        initComponents();
        buildModelParamaters();
        buildSelectedParametersList();
        buildSourceHistoryFilesList();
         
    }

    private void loadInitializationData() 
    {
      
        configData.put("<Stream-Information>", 
                                   createList("STREAM","FLOW RATE " ,"ENTHALPY ","TEMPERATURE","PRESSURE","AVE MW" ,"FREE WATER "));
        configData.put("<Stream State>" , 
                                    createList("STREAM ID", "ENTHALPY MM KCAL/HR" , "TEMPERATURE" , "PRESSURE KGF/CM2",
                                    "MOL % VAPOR","FREE WATER KGMOL/HR","  TOTAL KGMOL/HR","TOTAL KG/HR",
                                    "AVE MOL WT","TR ","PR " ,"PG  PSIA"));
        configData.put("<Components>" , 
                                    createList("HYDROGEN" , "NITROGEN " , "OXYGEN ","METHANE", "ETHANE "));
        
        configData.put("<Stream-data>" , 
                                    createList("STEP","CRITICAL TEMPERATURE, C","CRITICAL PRESSURE, KGF/CM2" ,"INLET GAS FLOW, ACFM",
                                "COMPRESSION RATIO","EFFICIENCY (ASSIGNED)" ,"BRAKE HORSEPOWER",
                                "BRAKE HORSEPOWER FOR QUICK CHECKING","OUTLET TEMPERATURE, C","OUTLET TEMP FOR QUICK CHECKING, C",
                                "COMPRESSIBILITY FACTOR, INLET ","COMPRESSIBILITY FACTOR, OUTLET","HEAT BALANCED OUTLET TEMP, C",
                                "CP/CV AT INLET TEMP"));
        
        configData.put("<Stream-efficiency-information>" , 
                                    createList("STEP","EQUILIBRIUM CONSTANT @ OUTLET TEMP", "% N2 CONVERTED AT EQUILIBRIUM" ,
                                "EQUILIBRIUM TEMPERATURE,C ", "BED LENGTH " , "PRESS DROP " , "OUTLET CONV OF N2",
                                "OUTLET TEMP "));
    }
    
    private void buildModelParamaters()
    {
      modelParametersListBox.setModel(
                new javax.swing.DefaultComboBoxModel(getConfigKeys()));
      
      modelParametersListBox.addItemListener(new ItemListener() 
      {

          @Override
          public void itemStateChanged(ItemEvent ie) {
              String key = (String) ie.getItem();
              
              log( key );
              
              DefaultListModel<String> listModel = new DefaultListModel<>();
              for(String eachItem : getConfigParameters(key))
              {
                 listModel.addElement(eachItem);
              }
              modelAttributesList.setModel(listModel);
          }

          private void log(String t) {
              System.out.println(t);
          }
      });
    }
    
    private void buildSelectedParametersList()
    {
        selectedModelParametersList.setModel(selectedParametersListModel);
    }
    
     private void buildSourceHistoryFilesList() {
        soureHistoryFilesList.setModel(soureHistoryFilesListModel);
    }
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        selectSourcePdfFileButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        modelParametersListBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        modelAttributesList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedModelParametersList = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        addParameterToCriteriaList = new javax.swing.JButton();
        removeParameterFromCriteriaList = new javax.swing.JButton();
        soureHistoryFilesList = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        clearHistoryButton = new javax.swing.JButton();
        clearCriteriaButton = new javax.swing.JButton();
        fileToLoad = new javax.swing.JLabel();
        footerPanel = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultTextPane = new javax.swing.JEditorPane();
        saveResultAsButton = new javax.swing.JButton();

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        headerPanel.setName("headerPanel"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Data Model Analysis Engine");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contentPanel.setBackground(new java.awt.Color(204, 204, 204));
        contentPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Select Source PDF File");

        selectSourcePdfFileButton.setText("- Go - ");
        selectSourcePdfFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSourcePdfFileButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Model Parameters");

        modelParametersListBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Attributes");

        modelAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(modelAttributesList);

        selectedModelParametersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(selectedModelParametersList);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Selected Criteria For Report");

        addParameterToCriteriaList.setText(" >>");
        addParameterToCriteriaList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addParameterToCriteriaListActionPerformed(evt);
            }
        });

        removeParameterFromCriteriaList.setText("<<");

        soureHistoryFilesList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Source File History");

        clearHistoryButton.setText("Clear History");
        clearHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearHistoryButtonActionPerformed(evt);
            }
        });

        clearCriteriaButton.setText("Clear Criteria");
        clearCriteriaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCriteriaButtonActionPerformed(evt);
            }
        });

        fileToLoad.setText("/");

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addComponent(selectSourcePdfFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fileToLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(modelParametersListBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 293, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(soureHistoryFilesList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addParameterToCriteriaList)
                                    .addComponent(removeParameterFromCriteriaList))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(contentPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(28, 28, 28)
                                        .addComponent(clearCriteriaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(clearHistoryButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(soureHistoryFilesList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(clearHistoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectSourcePdfFileButton)
                    .addComponent(fileToLoad))
                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contentPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(modelParametersListBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(clearCriteriaButton))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addGroup(contentPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addParameterToCriteriaList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeParameterFromCriteriaList)
                        .addGap(69, 69, 69))))
        );

        footerPanel.setBackground(new java.awt.Color(102, 102, 102));

        runButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        runButton.setForeground(new java.awt.Color(0, 153, 0));
        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        resultTextPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Console"));
        resultTextPane.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        resultTextPane.setForeground(new java.awt.Color(0, 51, 255));
        resultTextPane.setText("-Console for output -");
        jScrollPane3.setViewportView(resultTextPane);

        saveResultAsButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        saveResultAsButton.setForeground(new java.awt.Color(0, 0, 204));
        saveResultAsButton.setText("Save Result As");
        saveResultAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultAsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout footerPanelLayout = new javax.swing.GroupLayout(footerPanel);
        footerPanel.setLayout(footerPanelLayout);
        footerPanelLayout.setHorizontalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveResultAsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        footerPanelLayout.setVerticalGroup(
            footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(footerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(footerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(footerPanelLayout.createSequentialGroup()
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveResultAsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(footerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(footerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addParameterToCriteriaListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addParameterToCriteriaListActionPerformed
           String value =   (String) modelAttributesList.getSelectedValue();
           selectedParametersListModel.addElement(value);
    }//GEN-LAST:event_addParameterToCriteriaListActionPerformed

    private void clearCriteriaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCriteriaButtonActionPerformed
                selectedParametersListModel.removeAllElements();
    }//GEN-LAST:event_clearCriteriaButtonActionPerformed

    private void clearHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearHistoryButtonActionPerformed
          soureHistoryFilesListModel.removeAllElements();
    }//GEN-LAST:event_clearHistoryButtonActionPerformed

    private void selectSourcePdfFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSourcePdfFileButtonActionPerformed
        fileToLoad.setText(getUserSelectedFile("pdf | PDF "));
        soureHistoryFilesListModel.addElement(fileToLoad.getText());
    }//GEN-LAST:event_selectSourcePdfFileButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        String fileToProcess = fileToLoad.getText();
        int size = selectedParametersListModel.getSize();
        
        List<String> criteria = new ArrayList<>();
        for(int i=0; i< size; i++)
        {
           criteria.add(selectedParametersListModel.get(i));
        }
        
        TextReader reader = new TextReader(new File(fileToProcess));
        String msg  = reader.convertPDFToString();
        
        String result = new StringFilter()
                .given(msg)
                .selectManyAttributes(criteria.toArray(new String[0]));
        
        log(result);
        
    }//GEN-LAST:event_runButtonActionPerformed

    
    /**
    * Save Content to a Filename
    * @param content
    * @param inputFileName
    */
   private void saveToFile(String content , String outputFileName)
   {
        if (content  == null || outputFileName == null)
        {
           return;
        }

	File outputFile = new File(outputFileName);

        System.out.println(" Writing to file");
        
	FileWriter fileWriter = null;
	try
        {
            fileWriter = new FileWriter(outputFile);
            fileWriter.write(content);

	} catch (IOException e)
        {
           log("An Error occurred while trying to save content to file") ;

	}finally
	{
            if (fileWriter != null){
	    try {
                 fileWriter.flush();
		 fileWriter.close();
		}catch (IOException e) {}
            }
	}
   }
    private void saveResultAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultAsButtonActionPerformed
        
        String fileToSave = getUserSelectedFile("XLS");
        
        saveToFile(resultTextPane.getText(), fileToSave);
        
        log(" Content has been saved to File  "+ fileToSave);
    }//GEN-LAST:event_saveResultAsButtonActionPerformed

     private void log(String from) {
       resultTextPane.setText(from);
    }
     
     public String getUserSelectedFile(final String fileExtension)
    {
        FileDialog dialog = new FileDialog(new JFrame());
        dialog.setFilenameFilter(
                new FilenameFilter() {

                    @Override
                    public boolean accept(File dir, String name)
                    {
                        return name.endsWith("."+fileExtension);
                    }
                 });

        dialog.setVisible(true);
        return dialog.getDirectory() + dialog.getFile();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addParameterToCriteriaList;
    private javax.swing.JButton clearCriteriaButton;
    private javax.swing.JButton clearHistoryButton;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JLabel fileToLoad;
    private javax.swing.JPanel footerPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList modelAttributesList;
    private javax.swing.JComboBox modelParametersListBox;
    private javax.swing.JButton removeParameterFromCriteriaList;
    private javax.swing.JEditorPane resultTextPane;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveResultAsButton;
    private javax.swing.JButton selectSourcePdfFileButton;
    private javax.swing.JList selectedModelParametersList;
    private javax.swing.JComboBox soureHistoryFilesList;
    // End of variables declaration//GEN-END:variables

   

    
}
